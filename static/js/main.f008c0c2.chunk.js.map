{"version":3,"sources":["components/Title/index.js","components/Banner/index.js","components/GameTiles/index.js","components/GameBoard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Banner","props","count","GameTiles","tileArray","map","tile","src","alt","key","id","onClick","handleClick","GameBoard","state","topScore","_this","sort","Math","random","console","log","setState","this","components_Banner","components_GameTiles","unclicked","Footer","App","components_Title","components_GameBoard","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s5BAaeA,0LARX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,sCAJQE,6BCoBLC,MArBf,SAAgBC,GAUd,OACEN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,UAAkDG,EAAMC,MAAxD,KACAP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,8BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,eACeG,EAAMC,eCOZC,MArBf,SAAmBF,GACjB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEZG,EAAMG,UAAUC,IAAI,SAAAC,GACnB,OACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEU,IAAKD,EAAKC,IACVC,IAAI,MACJC,IAAKH,EAAKI,GACVC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMS,aCsFtCG,6MA9FbC,MAAQ,CACNV,YAwBAF,OAAQ,EACRa,UAAW,KAGbH,YAAc,SAAAF,GAECM,EAAKF,MAAMV,UADMY,EAAKF,MAAMV,UAAUa,KAAK,kBAAMC,KAAKC,SAAW,KAE9EC,QAAQC,IAAIL,EAAKF,MAAMV,WACvBY,EAAKM,SAAS,CACZlB,UAAWY,EAAKF,MAAMV,UACtBF,MAAOc,EAAKF,MAAMZ,MAAQ,IAG5BkB,QAAQC,IAAIL,EAAKF,MAAMZ,2FAIvBqB,KAAKX,+CAoCL,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAQtB,MAAOqB,KAAKT,MAAMZ,MAAOa,SAAUQ,KAAKT,MAAMC,WACpDpB,EAAAC,EAAAC,cAAC4B,EAAD,CACErB,UAAWA,EACXK,IAAKL,EAAUM,GACfH,IAAKH,EAAUG,IACfmB,WAAW,EACXd,YAAaW,KAAKX,YAClBd,UAAWM,EAAUsB,UAAY,YAAa,eAxFlC3B,aCST4B,0LAVX,OACEhC,EAAAC,EAAAC,cAAA,UAAQa,GAAG,gBAAgBZ,UAAU,6CACnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAAA,yCALWE,cCiBN6B,0LAXX,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cAPUhC,cCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f008c0c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Title extends Component {\n  render() {\n    return (\n        <div className=\"jumbotron text-center mb-0\">\n            <h1>\"CCCCCCCClicky!\"</h1>\n        </div>\n    )\n  }\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction Banner(props) {\n\n  // const countAlert = () = { \n  //   if (props.count > 2){\n  //       console.log(\"You flew too high!\");\n  //   }else{\n  //     console.log(\"Keep going!\");\n  //   }\n  // };\n\n  return (\n    <ul className=\"list-group list-group-horizontal my-2\">\n      <li className=\"list-group-item flex-fill\">Score: {props.count} </li>\n      <li className=\"list-group-item flex-fill\">\"You Picked Wrong, Sucka!\"</li>\n      <li className=\"list-group-item flex-fill\">\n        High Score: {props.count}\n      </li>\n    </ul>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction GameTiles(props) {\n  return (\n    <div className=\"row justify-content-center\">\n\n      {props.tileArray.map(tile => {\n        return(\n        <div className=\"card col-3 m-3\">\n          <div className=\"img-container\">\n            <img\n              src={tile.src}\n              alt=\"...\"\n              key={tile.id}\n              onClick={() => props.handleClick(props.id)}\n            />\n          </div>\n        </div>\n      )})}\n    </div>\n  );\n}\n\nexport default GameTiles;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport tileArray from \"../../TileArray.json\";\nimport Banner from \"../Banner\";\nimport GameTiles from \"../GameTiles\";\n\nclass GameBoard extends Component {\n  state = {\n    tileArray,\n    // tiles: [\n    //   {\n    //     id: 1,\n    //     src: \"../images/01_img.png\",\n    //     unclicked: true\n    //   },\n    //   {\n    //     id: 2,\n    //     src: \"../images/02_img.png\",\n    //     unclicked: true\n    //   },\n    //   {\n    //     id: 3,\n    //     src: \"../images/03_img.png\",\n    //     unclicked: true\n    //   },\n    //   {\n    //     id: 4,\n    //     src: \"../images/04_img.png\",\n    //     unclicked: true\n    //   }\n    // ],\n    // \"-1\" forces the score to start at \"zero\" on componentDidMount;\n    count: -1,\n    topScore: -1\n  };\n\n  handleClick = id => {\n    const shuffleArray = tiles => this.state.tileArray.sort(() => Math.random() - 0.5);\n    shuffleArray(this.state.tileArray);\n    console.log(this.state.tileArray);\n    this.setState({\n      tileArray: this.state.tileArray,\n      count: this.state.count + 1\n    });\n\n    console.log(this.state.count);\n  }\n\n  componentDidMount() {\n    this.handleClick();\n  }\n\n \n\n  // ==============================================\n\n  // Couldn't Get this Update to \"Unclicked\"->False to Work (Yet)============================\n  // handleClick = event => {\n  //   let tiles = this.state.tiles.slice();\n  //   // let clickStatus = tiles.unclicked;\n  //   let value = event.target.value;\n  //   // const id = event.target.key;\n\n  //   // if (value === true){\n  //   //   console.log(\"This image was already clicked\");\n  //   // }\n\n  //   this.setState({\n  //     tiles: value\n  //   });\n\n  //   console.log(tiles);\n  //   // this.setState({ tiles });\n  //   // console.log(tiles);\n  // }\n  // Couldn't Get this Update to \"Unclicked\"->False to Work (Yet)============================\n\n  // toggleClass(){\n  //   const currentState = this.state.tileArray.unclicked;\n  //   this.setState({ unclicked: !currentState})\n  // }\n\n\n  // Starts the game as soon as the component loads\n  render() {\n    return (\n      <div>\n        <Banner count={this.state.count} topScore={this.state.topScore} />\n          <GameTiles \n            tileArray={tileArray}\n            key={tileArray.id}\n            src={tileArray.src}\n            unclicked={true}\n            handleClick={this.handleClick}\n            className={tileArray.unclicked ? 'unclicked': null}\n            />\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer id=\"sticky-footer\" className=\"footer fixed-bottom bg-dark text-white-50\">\n        <div className=\"container text-center text-light\">\n          <p>Copyright &copy; 2019</p>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Title from \"./components/Title\";\nimport GameBoard from \"./components/GameBoard\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nclass App extends Component {\n\n  render(){\n    return(\n      <div className=\"container text-center bg-light\">\n        <Title />\n        <GameBoard />\n        <Footer />\n      </div>\n    )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}